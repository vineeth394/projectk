name: Java CI with Maven, SonarQube, and Production Deployment

on:
  push:
    branches:
      - main
      - 'feature/*'
  pull_request:
    branches:
      - main
      - 'feature/*'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Trigger deploy to production'
        required: true
        default: 'false'

jobs:
  # Parallel Job: Build and Test on Self-Hosted EC2 (with Tomcat installed)
  build_and_test:
    # This job will run on a self-hosted runner with the "staging" label.
    # Ensure your self-hosted runner for staging has the label `staging` assigned to it.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Environment Setup Script (env-setup.sh)
        run: |
          chmod +x ./env-setup.sh
          ./env-setup.sh  # This sets up Java, Maven, etc.

      - name: Build with Maven
        run: mvn clean install -DskipTests
        if: ${{ github.event_name != 'pull_request' }}  # Only run on push events, skip for PR

      - name: Run Unit Tests with Maven
        run: mvn test
        if: ${{ success() }}  # Run this step only if the previous build step succeeded

  # Sequential Jobs: SonarQube Analysis and Artifact Upload
  sonar_analysis:
    # This job will also run on the self-hosted runner with the "staging" label.
    # Ensure the staging runner has the "staging" label.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
           java-version: 17
           distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=vineeth394_projectk

  upload_artifact:
    # This job will also run on the self-hosted runner with the "staging" label.
    # Ensure the staging runner has the "staging" label.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload Artifact to JFrog Artifactory
        run: |
          echo "Uploading artifact to JFrog Artifactory..."
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>assignment</id>
                      <username>${{ secrets.JFROG_USERNAME }}</username>
                      <password>${{ secrets.JFROG_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

          mvn clean deploy
        # run: |
        #   echo "Uploading artifact to JFrog Artifactory..."
        #   curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_API_KEY }}" \
        #        -T target/my-helloworld.war \
        #        "https://jfrog.example.com/artifactory/my-repo/my-helloworld-${{ needs.build_and_test.outputs.version }}.war"

  # Matrix Job: Deployment to Staging and Production (Self-Hosted EC2 with Tomcat installed)
  deploy:
    # This job will deploy to both staging and production environments based on the matrix configuration.
    # The staging environment will use the self-hosted runner with the "staging" label.
    # The production environment will use the self-hosted runner with the "production" label.
    runs-on: self-hosted  # Use dynamic environment (staging or production)
    needs: [sonar_analysis, upload_artifact]  # Waits for SonarQube and Artifactory jobs to complete
    strategy:
      matrix:
        environment: [staging, production]  # Deploy to both staging and production environments
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Tomcat (Staging/Production)
        run: |
          echo "Deploying to ${{matrix.environment}}..."

          # Deploy artifact to the appropriate Tomcat server based on the environment
          if [ "${{ matrix.environment }}" == "staging" ]; then
            # Deployment to the staging environment
            sudo chown -R ubuntu:ubuntu /opt
            cd /opt/apache-tomcat-10.1.34/webapps/
            curl -L -u "admin:cmVmdGtuOjAxOjE3Njg1NjE0Mjk6aU9jaXYxTFZDaVVZSzRqV2tLc0JrM0k1T0ht" -O "http://3.110.142.51:8082/artifactory/assignment-libs-release-local/com/example/my-helloworld/1.0.0/my-helloworld-1.0.0.war"
          elif [ "${{ matrix.environment }}" == "production" ]; then
            # Deployment to the production environment (only triggered on master branch)
            if [[ $GITHUB_REF == "refs/heads/master" ]]; then
              sudo chown -R ubuntu:ubuntu /opt
              cd /opt/apache-tomcat-10.1.34/webapps/
              curl -L -u "admin:cmVmdGtuOjAxOjE3Njg1NjE0Mjk6aU9jaXYxTFZDaVVZSzRqV2tLc0JrM0k1T0ht" -O "http://3.110.142.51:8082/artifactory/assignment-libs-release-local/com/example/my-helloworld/1.0.0/my-helloworld-1.0.0.war"
            else
              echo "Skipping production deployment: Only from master branch"
            fi
          fi
        if: ${{ needs.upload_artifact.result == 'success' }}  # Deploy only if the artifact upload was successful
